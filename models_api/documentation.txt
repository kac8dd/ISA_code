PURPOSE
	The models_api server provides an interface to the backend database
	for our website. It is designed to listen on port 8000 and respond
	to api calls from the experience services server.


DIRECTORY HEIRARCHY:

 /models_api/			#root directory 
	db.sqlite3		#unused
   	manage.py		#the python script used to manage the server
   	models_api/ 		#the inner app for the server 
		__init__.py 	#empty file indicating this directory should be
				 #considered a python package 
		settings.py 	#configuration file for the site 
		urls.py 	#the base url redirect file 
		wsgi.py				

	db_service/		#the app encompasing the database service	
		__init__.py  	#empty file indicating this directory should be
				#considered a python package 
		migrations/ 	#file containing autogenerated code used to talk with
				 #the mysql datase 
		tests.py 	#unit tests to run on this server 
		views.py	#python code that handles the request/respond logic
				 #of the server 
		admin.py	#file specifying admin authorities for the site
		models.py	#file containing python models stored in the database
		urls.py		#url parsing file, this is where the api syntax is
				 #specified
MODELS
	UserProfile
		user		:	OneToOneField->(Django.User) 
		First_name	:	CharField 
		Last_name	:	CharField		
	Event
		name		:	CharField
        	description	:	CharField
        	start_time	:	DateTimeField
        	pub_date	:	DateTimeField 
        	location	:	CharField
	
	Ticket
		name		:	CharField
        	price		:	FloatField
        	event		:	ForeignKey->(Event)
        	amount 		:	IntegerField

	Purchase
		user_profile	:	OneToOneField->(UserProfile)
        	ticket		:	OneToOneField->(Ticket)
        	date		:	DateTimeField
		
API FORMAT (v1) 
	
   Object Creation:	POST data fields are saved as the new model's fields	
        
	/api/v1/create/event/ 
        /api/v1/create/ticket/
        /api/v1/create/user/
	/api/vi/create/purchase/
        
   Updating an objects fields:
	/api/v1/update/event/(?P<event_id>\d+)/ 
        /api/v1/update/ticket/(?P<ticket_id>\d+)/ 
        /api/v1/update/user/(?P<event_id>\d+)/ 
        /api/v1/update/purchase(?<purchase_id\d+)
	
   Looking up an object
	/api/v1/get/event/(?P<event_id>\d+)/$$'
        /api/v1/get/ticket/(?P<ticket_id>\d+)/
        /api/v1/get/user/(?P<user_id>\d+)/
	/api/v1/get/purchase/(?P<purchase_id>\d+)/		
